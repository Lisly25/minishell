1. You can redirect output and STILL use pipes! -> or at least it will seem so, but the output redirection has priority:

	- if you redirect the input, the previous commands' output won't matter
	- if you redirect the output, the commands "downstream" won't get the output, it will just be in the file

2. Input redirection (< or <<):
	- normal input redirection has to be at the beginning of the line, and is always followed by the input file, then the command
	- heredoc can be both at the front of the line, or following the command:
		case 1: $ << LIMITER command

		case 2: $ command << LIMITER
	- but the two '<' signs in the case of heredoc must be right next to each other, or:

		"bash: syntax error near unexpected token `<'"
	
	- single "<" in the wrong place will be interpreted (or attempted to) as if it were a command

	- if single '<' OR double "<<" is at the end of the command:

		"bash: syntax error near unexpected token `newline'"

	- heredoc redirection can even be after the output redirection and the command, but should be followed by the LIMITER. Such as:

		minishell$ > output2.txt cat << END

	- this is wild, but should we also just handle redirections to any fd? Technically, the stdin and the stdout are just the "default", but you can also redirect any fd as input or output

	- there can be multiple inputs and outputs - even multiple heredocs
		- with normal input file, the sum of their content is the input
		- with output, it is outputted to all the files the same way
		- with multiple heredocs, both limiters have to be entered in the correct order to end the input (but there can be extra, non-limiter strings between them)

	- we separated the input- and output redirections, and went through the input redirection first: WHICH IS WRONG, because bash just opens and redirects them in the order they are given


3. Error codes

	- syntax error is 258, and I added a macro for it
		- but since that is an exit code, it feels like even though we know that's an error, we should launch a child process and have it exit with that code and message?
		- but what if it's an error regarding the pipe symbol?

4. bash builtins and quotes

	About quotes:

	- only supposed to affect shell builtins such as echo, NOT other commands like cat!
	- unclosed quotes in the shell will trigger a prompt - we don't need to handle that, we'll just throw an error

	- from what I can tell, when looking for quotes, the string is just parsed left to right even when a quote is found - it won't start looking from the back. With nested quotes, this means that

			minishell>$ echo Hello '$PWD'$PWD'$PWD'

		will return

			minishell>$ Hello $PWD/Users/skorbai/new dir$PWD

		And it seems that once it finds a type of quote, it will just keep looking for a pair for that instead of dealing with another type of code along the way. For example:

			minishell>$ echo Hello "$PWD'$PWD'$PWD"

		will return

			minishell>$ Hello /Users/skorbai/new dir'/Users/skorbai/new dir'/Users/skorbai/new dir

		Flipping the quote types still seems to allude to this pattern:

			minishell>$ echo Hello '$PWD"$PWD"$PWD'

		returns:

			minishell>$ Hello $PWD"$PWD"$PWD

5. Splitting

	- how I think that the splitting needs to be done, with quotes in mind, is to split along spaces BUT protect spaces inside quotes

	- sanitizing the spaces or not is only going to be the next step

	- so, in a case where the quotes are not surrounded by spaces, they should all be one string. Example:

			minishell>$ echo Hello      w"orld"

		returns:

			Hello world

	- function works with single and double quotes now (the latter only when testing in minishell)

6. Splitting along pipes

	- must watch out for two pipe symbols after each other with no spaces, because that is the OR operator (so that's one more reason why normal split can't be used for this)
	- if there's a pipe in the wrong place, the error message is

		bash: syntax error near unexpected token `|'

	- but if there's AT LEAST two consecutive pipes (in this case, even a space will make it non-consecutive), it will be:

		bash: syntax error near unexpected token `||'

	- it will stay the above no matter how many extra we add

7. Pipes:

	trying to start a command with | (like | echo Hello) will result in an error:

	zsh: parse error near `|'
	bash: syntax error near unexpected token `|'

	trying to end a command with | (like cat file1 |) will result in input getting requested with - in ZSH:

	pipe>

	If the command gets typed in correctly, it will execute as normal pipe.
	If it is not typed correctly, it will trigger an appropriate error message, as if it were a classically structured pipe
	If enter is pressed, it will keep asking for a prompt

	BASH:

	similar, but only the second command will be executed

	- according to the subject, however:

		"The output of each command in the pipeline is connected to the input of the next command via a pipe"

	So, we'll just disallow input to end with a pipe :)

	- bash seems to check for syntax errors before forking, because a syntax error in just one part of the command will also prevent all others from executing (but will set the last exit status as 258)

8. sanitization

	- open() does not do any sort of sanitization, but the redirections in bash clearly does:

		- even environment variables can be used in names, and they will be expanded

		- one new type of error I discovered: "ambiguous redirect".

		Scenario:

		1. Make new environment variable:

			> export $HELLO=Hello

		2. try to use it, but it is in lower case:

			> echo Hello > $hello

		3. Get error message:

			bash: $hello: ambiguous redirect

		Trying to use builtins environment variables in such a way, for example pwd, regardless of if it's upper or lower case, will gave the same error message.

9. Finding path to file:

	- Bash simply seems to look for the first executable in the PATH environment variable - it will not keep looking for another even if the first it found had some issues.

	- for example, I made an executable, and added the current directory to the PATH variable: at that point, I could execute it without the ("./") prefix.
		- then, I renamed it to "cat": at that point, the new path was at the end of the PATH variable, so the original "cat" shell command was getting executed when running "cat"
		- but then I edited the PATH variable, and moved my current directory to be the first array:
			- "cat" executed my executable now, not the shell command
			- when I removed the execute permission from my "cat", I got a permission denied message as expected
			- thus, it should be perfectly possible to "break" the terminal, and should be allowed

	- What order does bash actually look for executables in? Along path variable/relative/absolute?
		Does it matter? One executable can only be reached one way, or another.
			- a shell command will have either no "/" in its name -> look in the PATH variable
			- or it will, and then it must be an absolute path if it's what it starts with.
			- and if it does have "/", but that's not what it starts with, it must be a relative path

		Normally, you can't run an executable without specifying a path if its path is not in the environment variable
			BUT if you unset the path, you can! -> unsetting the path seems to "set" the path to the current directory (relative paths will still work)

